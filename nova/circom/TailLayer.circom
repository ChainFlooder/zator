pragma circom 2.1.1;

include "./node_modules/circomlib-ml/circuits/Dense.circom";
include "./utils/mimcsponge.circom";

template TailLayer(nRows, nCols) {
    signal input prevHash;
    signal input in[nRows];

    var activations[nCols] = [-2668063402, -5067151069, -2971550703, -687616050, -2723362445, -1798599481, -5607901096, -1523757457, -3222915410, -2834131240];
    var bias[nCols] = [-58503855, 156790644, -269139022, -112723760, -215761110, 299724340, -156270385, 107956357, 101581819, 65464020];
    var weights[nRows][nCols] = [[-132959083,  106872514,   84586658,  -77235796, -213347256,
         -12183776,  101500995, -102216601,   73186137, -376272649],
       [-118531562,   86906105,  220119148,  320090711, -365664691,
          48274063,  276752979, -162163347, -316621184, -550139070],
       [-329652816, -339604646,  413487434,  119967423, -492343932,
        -132888019,  319925666, -173193753, -218109071, -336728811],
       [-264469504,   51971678,  118102245,  -11287929,    9895936,
          13292164,   38057510, -151443675, -130264342,   18257806],
       [  52381743,  144296482,   -3371123,  -23759527, -108932972,
         150172547, -242826551,  450861365,   57873614,  -42976104],
       [ 174369216, -301305175, -241652369, -230053186,  102926336,
          90075918,   63386165,   30961528,   33832297,  140474588],
       [-185415685,   49795374,   79619996,  160826370,   25708729,
        -116984963, -178372145,  -38902879,  -92185006,  -66494718],
       [ 221723706, -291446805, -465010971,  -77907294, -175482869,
         189688206, -256862044, -214684963,  183467686, -161339149],
       [-309684753,   -9619392,  193613485,   11117218,   10193259,
        -191988826,   17776089, -229314595, -248305202, -458711386],
       [-161587641, -185699403,   53009324, -511097372,  -93785308,
        -295047671,   92790410, -410782069,  -77053860, -165701270],
       [  86690351, -577240825,   59961818,   54231685,   -4037942,
         119021609, -146749362,  130688980,  -24708649,   94760552],
       [ 230051488, -838775694,  133515462, -299034774, -167839780,
        -123020820, -106839158, -223487869,   42975459, -248096228],
       [ 304787576, -166491061,  -24194283,  165441915, -354949832,
         166352168, -185147002,  275021106, -164725989,  -49266949],
       [-137462780,  -61757192, -202421293,  113857001,  -49965620,
         -54668881, -462321937,   34903660,  119534254,    6175659],
       [ -40990170, -482105821,  -60332894,   83571330,  189701065,
         -10046669,   -5201103,  -74892886,   19673277,  154564813],
       [  -9586032,  190415069,  151301175, -280505091, -188105509,
        -210724756, -278091371,  113345638,  140735254,   45050189],
       [ 191044495,  -17568311,   78452632, -123803809,  -69353625,
         127549380,  -39858036,  -81554256, -165327966,  -35177898],
       [-259335011,  137587070, -111758642,  156115592, -136126310,
         176998869, -361230493, -105992526,   96932292,  -52258037],
       [  13316132, -118141405, -360508323,  158333525,   -4379968,
         -30942338,  -87399080,  -44880837, -179024071,  -32215241],
       [ 108754531,   59751086,  416148335,   44222914,  -54994281,
        -424223363,  278201252,   16974229, -170221478, -194749817],
       [  18873189,  103429988,  -63250080, -295424134,  -47385316,
        -110973887,  274071962, -220136076, -190114334, -215989053],
       [  -9187305,  348410279, -235482112,  307683825, -104635723,
         -87948337,  138617411,   -9985576, -375269949, -262660831],
       [-169912294, -315983117, -162123427,   52885126, -251344055,
         -10822441,  -31655695, -182823822,  -31100864,    1450819],
       [ -97521044,   51823962,  -74503317,  216162920,  -67727819,
        -161537111, -302558064,  169306502,  -75018719, -116708450],
       [-360360384,  261006892,  -96977457,   50792627, -120240770,
          -8928200, -602406681,  -91909364, -152706042,  -65747552],
       [ -95218539,   90955369,  -27277926, -204042643,   94060071,
        -199327394,  -82844123, -185445443,  245159924,   31517208],
       [  93004204, -367747992, -137688592,  -42920999,  129152760,
         -93962006,  -80450490, -202501684,  195285678,  -12102121],
       [-438288480, -438777149, -465414107,   -6842434,   79590648,
         175649479, -269072711,  -93974896,     933986,  251008928],
       [  33774301,   61065890,  -36199689,  -84301613, -213578701,
         -75699240, -170267045, -265133798, -194341436, -288005292],
       [-114596628, -573218286, -299759775,  201534107, -214419350,
          80260955,   21005269,  -52212112,  -78684293, -210146531],
       [-367767304, -341378987, -374631047,   13304414,   23465125,
        -104655355, -398269773,  257061571,   67347132,  185197756],
       [-127350911, -341565996,   34876186,   92974119, -123619609,
         262389153,  113134965,  -16238460,   19980138,   83460957]];

    signal output finalHash;

    // LOGIC
    // 1. Check hash of activation from prev layer matches hash of input to this layer
    component mimc_previous_activations = MiMCSponge(nRows, 91, 1);
    mimc_previous_activations.ins <== in;
    mimc_previous_activations.k <== 0;
    
    prevHash === mimc_previous_activations.outs[0];

    // 2. Compute product Ax + b
    component dense = Dense(nRows, nCols);
    dense.in <== in;
    dense.weights <== weights;
    dense.bias <== bias;

    signal result[nCols];
    for (var i = 0; i < nCols; i++) {
        result[i] <== dense.out[i];
    }

    // 3. Compute hash of result
    component mimc_hash_activations = MiMCSponge(nCols, 91, 1);
    mimc_hash_activations.ins <== result;
    mimc_hash_activations.k <== 0;
    finalHash <== mimc_hash_activations.outs[0];
}

component main { public [prevHash, in] } = TailLayer(32, 10);